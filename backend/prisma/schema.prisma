generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model User {
  id                Int            @id @default(autoincrement())
  username          String         @unique
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  phone             String
  status            String         @default("INACTIVE")
  role              Role           @default(USER)
  isVerified        Boolean        @default(false)
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  country           String         @default("UG")
  avatarUrl         String?
  announcements     Announcement[] @relation("CreatedBy")
  sourceCommissions Commission[]   @relation("CommissionSource")
  commissions       Commission[]
  node              Node?
  notifications     Notification[] @relation("NotificationUser")
  referralLinks     ReferralLink[]
  reports           Report[]
  sessions          Session[]
  withdrawals       Withdrawal[]

  @@map("users")
}

model Node {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  position    String    @default("ONE")
  status      String    @default("ACTIVE")
  level       Int       @default(1)
  sponsorId   Int?      @map("sponsor_id")
  placementId Int?      @map("placement_id")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  package     NodePackage?
  payments    NodePayment[]
  statements  NodeStatement[]
  withdrawals NodeWithdrawal[]
  parent      Node?            @relation("TreeStructure", fields: [placementId], references: [id])
  children    Node[]           @relation("TreeStructure")
  sponsor     Node?            @relation("SponsorRelation", fields: [sponsorId], references: [id])
  sponsored   Node[]           @relation("SponsorRelation")
  availableBalance Int @default(0)

  @@index([placementId], map: "nodes_placement_id_fkey")
  @@index([sponsorId], map: "nodes_sponsor_id_fkey")
  @@map("nodes")
}

model Package {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?       @db.Text
  price        Decimal       @db.Decimal(10, 2)   
  level        Int
  status       String        @default("ACTIVE")
  benefits     Json?
  maxNodes     Int           @default(1)
  duration     Int           @default(450)
  features     String?       @db.Text
  imageUrl     String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  dailyMultiplier Decimal?   @db.Decimal(10, 2) @default(1)
  commissions  Commission[]
  nodePackages NodePackage[]
  nodePayments NodePayment[]
  systemRevenue SystemRevenue[]

  @@map("packages")
}

model NodePackage {
  id        Int      @id @default(autoincrement())
  nodeId    Int      @unique @map("node_id")
  packageId Int      @map("package_id")
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  node      Node     @relation(fields: [nodeId], references: [id])
  package   Package  @relation(fields: [packageId], references: [id])
  activatedAt DateTime?
  expiresAt  DateTime?

  @@index([packageId], map: "node_packages_package_id_fkey")
  @@map("node_packages")
}

model NodePayment {
  id                Int           @id @default(autoincrement())
  node             Node          @relation(fields: [nodeId], references: [id])
  nodeId           Int
  amount           Decimal       @db.Decimal(10, 2)
  status           PaymentStatus @default(PENDING)
  type             String
  transactionId    String        @unique
  reference        String?       @unique
  paymentMethod    String         
  phoneNumber      String?
  transactionDetails Json?
  completedAt      DateTime?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  packageId        Int?
  package          Package?      @relation(fields: [packageId], references: [id])
  activatedAt      DateTime?

  @@index([nodeId], name: "node_payments_node_id_fkey")
  @@map("node_payments")
}

model NodeStatement {
  id          Int      @id @default(autoincrement())
  nodeId      Int      @map("node_id")
  amount      Decimal  @db.Decimal(10, 2)
  status      String   @default("PENDING")
  type        String
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  node        Node     @relation(fields: [nodeId], references: [id])
  activatedAt DateTime?
  completedAt DateTime?
  balanceAfter Decimal? @db.Decimal(10, 2) @default(0) @map("balance_after")
  referenceType String
  referenceId   Int
  @@index([nodeId], map: "node_statements_node_id_fkey")
  @@map("node_statements")
}

model NodeWithdrawal {
  id             Int              @id @default(autoincrement())
  nodeId         Int              @map("node_id")
  amount         Decimal          @db.Decimal(10, 2)
  status         WithdrawalStatus @default(PENDING)
  transactionId  String           @unique
  reason         String?          @db.Text
  paymentPhone   String?          @map("payment_phone_number")
  paymentType    String           @default("mobile money") @map("payment_type")
  withdrawalDate DateTime?        @map("withdrawal_date")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  node           Node             @relation(fields: [nodeId], references: [id])

  @@index([nodeId], map: "node_withdrawals_node_id_fkey")
  @@map("node_withdrawals")
}

model Commission {
  id           Int              @id @default(autoincrement())
  userId       Int              @map("user_id")
  amount       Decimal          @db.Decimal(15, 2)
  type         CommissionType
  level         String @default("LEVEL 1")
  description  String?          @db.Text
  status       CommissionStatus @default(PENDING)
  sourceUserId Int?             @map("source_user_id")
  packageId    Int?             @map("package_id")
  processedAt  DateTime?        @map("processed_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  package      Package?         @relation(fields: [packageId], references: [id])
  sourceUser   User?            @relation("CommissionSource", fields: [sourceUserId], references: [id])
  user         User             @relation(fields: [userId], references: [id])

  @@index([packageId], map: "commissions_package_id_fkey")
  @@index([sourceUserId], map: "commissions_source_user_id_fkey")
  @@index([userId], map: "commissions_user_id_fkey")
  @@map("commissions")
}

model Announcement {
  id          Int              @id @default(autoincrement())
  title       String
  content     String           @db.Text
  type        AnnouncementType @default(GENERAL)
  priority    Priority         @default(LOW)
  status      String           @default("DRAFT")
  createdBy   Int              @map("created_by")
  publishDate DateTime?        @map("publish_date")
  expiryDate  DateTime?        @map("expiry_date")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  author      User             @relation("CreatedBy", fields: [createdBy], references: [id])

  @@index([createdBy], map: "announcements_created_by_fkey")
  @@map("announcements")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  title     String
  message   String   @db.Text
  type      String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation("NotificationUser", fields: [userId], references: [id])

  @@index([userId], map: "notifications_user_id_fkey")
  @@map("notifications")
}

model PrizeConfig {
  title           String // Name/title of the prize
  id              Int      @id @default(autoincrement())
  amount          Decimal  @db.Decimal(15,2) // Total prize pool for the window
  startTimeUTC    String   // e.g., "22:00"
  durationMinutes Int      // e.g., 10
  maxWinners      Int      // e.g., 10
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("prize_config")
}


model Report {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String
  data      Json
  status    String   @default("PENDING")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "reports_user_id_fkey")
  @@map("reports")
}

model Withdrawal {
  id            Int              @id @default(autoincrement())
  userId        Int              @map("user_id")
  amount        Decimal          @db.Decimal(10, 2)
  status        WithdrawalStatus @default(PENDING)
  method        String
  details       Json?
  transactionId String           @unique
  attempts      Int              @default(0)
  processedAt   DateTime?        @map("processed_at")
  completedAt   DateTime?        @map("completed_at")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  user          User             @relation(fields: [userId], references: [id])

  @@index([userId], map: "withdrawals_user_id_fkey")
  @@map("withdrawals")
}

model Session {
  id         String   @id
  userId     Int      @map("user_id")
  userAgent  String?
  ipAddress  String?
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("sessions")
}

model ReferralLink {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  username    String
  code        String   @unique
  link        String   @unique
  clicks      Int      @default(0)
  conversions Int      @default(0)
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "referral_links_user_id_fkey")
  @@map("referral_links")
}

model SystemRevenue {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(10, 2)
  type        String   // e.g., 'PACKAGE_PURCHASE', 'COMMISSION_REMAINDER'
  description String?  @db.Text
  status      String   @default("PENDING")
  paymentId   Int?     @map("payment_id")
  packageId   Int?     @map("package_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  package     Package? @relation(fields: [packageId], references: [id])

  @@index([packageId], map: "system_revenue_package_id_fkey")
  @@map("system_revenue")
}

// Admin Configuration Model
model AdminConfig {
  id                    Int      @id @default(autoincrement())
  // Site Information
  siteName              String   @default("Earn Drip")
  siteLogoUrl          String?
  siteBaseUrl          String   @default("https://earndrip.com")
  promoImageUrl        String?  // URL for the promotional image

  // Payment Collection Numbers
  mtnCollectionNumber   String?
  airtelCollectionNumber String?

  // Support Information
  supportPhone         String?
  supportEmail         String?
  supportLocation      String?

  // Currency Rates
  depositDollarRate    Float    @default(3900.0)  // UGX to USD rate for deposits
  withdrawalDollarRate Float    @default(3900.0)  // UGX to USD rate for withdrawals
  withdrawalCharge     Float    @default(2.0)     // Withdrawal charge in percentage

  // USDT Wallet
  usdtWalletAddress    String?

  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Ensure only one config exists
  @@unique([id])
  @@map("admin_config")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  SUCCESSFUL
  FAILED
  CANCELLED
  REJECTED
}

enum AnnouncementType {
  GENERAL
  MAINTENANCE
  UPDATE
  PROMOTION
  EMERGENCY
}

enum CommissionType {
  DIRECT
  MATCHING
  LEVEL
}

enum CommissionStatus {
  PENDING
  PROCESSED
  FAILED
  WITHDRAWN
}

enum Position {
  ONE
  TWO
  THREE
}
